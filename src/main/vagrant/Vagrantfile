# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# Copyright (c) 2015 fStream. All Rights Reserved.
#
# fStream - VirtualBox VM Vagrant file
#
# Description: 
#   The is settings.yml driven Vagrant file for provisioning the fStream stack using a 
#   meta data driven provider and Ansible provisioner.
#
# See:
#   Vagrant:
#   - http://docs.vagrantup.com/v2/provisioning/ansible.html
#   - http://docs.vagrantup.com/v2/virtualbox/configuration.html
#   - https://github.com/mitchellh/vagrant-aws
#
#   Ansible:
#   - http://www.ansibleworks.com/docs/
#   - http://www.ansibleworks.com/docs/guide_vagrant.html
#   - http://jinja.pocoo.org/docs/templates/

require "yaml"

# Ensure that this was not loaded directly
if defined?($settings_file).nil?
   abort("$settings_file not defined. Because this is not a top level Vagrantfile, it cannot be invoked directly. Please ensure you are in a profile directory.")
end

# Vagrant config
settings = File.open($settings_file) { |yf| YAML::load( yf ) }
boxes = settings['boxes']
provider = settings['provider']

# Ansible config
@ansible_path = "../../ansible"
@playbook = @ansible_path + "/" + (ENV['playbook'] || "site.yml")
@limit      = ENV['limit']      || ['all']
@extra_vars = ENV['extra_vars'] || {}
@verbose    = ENV['verbose']    || 'vv'

# Ansible environment. See https://github.com/mitchellh/vagrant/issues/2924
ENV['PYTHONIOENCODING'] = "utf-8"
ENV['ANSIBLE_CONFIG'] = @ansible_path + "/" + "ansible.cfg"
ENV['ANSIBLE_ROLES_PATH']  = @ansible_path + "/" + "roles"
ENV['VAGRANT_DEFAULT_PROVIDER'] = provider

# Ansible groups
@groups = Hash.new { |hash, key| hash[key] = [] }
boxes.each do |box|
   box['groups'].each do |group| 
      @groups[group] << box['name']
   end
end

# Launch and provision all VMs
Vagrant.configure("2") do |config|
  # Base box
  if provider == 'virtualbox'
     config.vm.box = "trusty64" 
     config.vm.box_url = "https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box"
  end
  if provider == 'aws'
     config.vm.box = "dummy" 
     config.vm.box_url = "https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box"
  end
  
  boxes.each_with_index do |box, index|
    config.vm.define box['name'] do |vms|
       vms.vm.hostname = box['name']
       
       # Provide
       if provider == 'virtualbox'
	       virtualbox(vms, box)
       end
       if provider == 'aws'
	       aws(vms, box)
       end
       
       #
       # Pro tip: Last box always runs Ansible provisione for all the boxes. Forces all boxes to be up beforehand
       #
       if index == boxes.length - 1
	       provision(vms)
       end
    end  
  end
end

def virtualbox(vms, box)
  # Vagrant uses and requires eth0 (ansible_eth0) to be used for NAT. eth1 (ansible_eth1) is used for VM to VM communication
  @extra_vars['default_ipv4_interface'] = 'ansible_eth1'

  # Execute VirtualBox provider
  vms.vm.provider :virtualbox do |v|
   # Appliance name
    v.name = box['name']

    # Network
    vms.vm.network :private_network, type: "dhcp"

    vb = box['virtualbox']
    if !vb.nil?
       # Resources
       if vb.has_key?("memory")
          v.customize ["modifyvm", :id, "--memory", vb['memory']]
       end
       if vb.has_key?("cpus")
          v.customize ["modifyvm", :id, "--cpus", vb['cpus']]
       end
       if vb.has_key?("forwarded_ports")
          vb['forwarded_ports'].each do |port|
            vms.vm.network :forwarded_port, guest: port['guest'], host: port['host']
          end
       end

       # Set the timesync threshold to 10 seconds, instead of the default 20 minutes.
       # If the clock gets more than 15 minutes out of sync (e.g. your laptop going
       # to sleep), then some 3rd party services will reject requests.
       v.customize ["guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 10000]
    end
  end
end

def aws(vms, box) 
  # Execute AWS provider
  vms.vm.provider :aws do |aws, override|
    # Instance parameters
    aws.ami = "ami-9eaa1cf6" # Ubuntu
    aws.instance_type = box['aws']['instance_type']
    
    # Authentication
    aws.access_key_id = ENV['AMAZON_ACCESS_KEY_ID']
    aws.secret_access_key = ENV['AMAZON_SECRET_ACCESS_KEY']
    
    # Security
    aws.keypair_name = "fstream"
    aws.security_groups = ["default"]
    
    # Metadata
    aws.tags["Name"] = box['name'] # Will show as instance name
    
    # Access          
    override.ssh.username = "ubuntu"
    override.ssh.private_key_path = "~/.ssh/fstream.pem"
  end   
end

def provision(vms)
  vms.vm.provision :ansible do |ansible|
    # Base configuration
    ansible.playbook = @playbook
    ansible.limit = @limit
    ansible.groups = @groups
    ansible.extra_vars = @extra_vars
    ansible.verbose = @verbose
    
    # Special configuration
    # - Avoids ssh: connect to host <ip-address> port 22: Host is down
    ansible.raw_arguments = "--timeout=60"
  end
end
