/*
 * Copyright (c) 2014 fStream. All Rights Reserved.
 *
 * Project and contact information: https://bitbucket.org/fstream/fstream
 *
 * Unauthorized copying of this file, via any medium is strictly prohibited.
 * Proprietary and confidential.
 */

import com.github.jengelman.gradle.plugins.shadow.transformers.*

// Can't use Boot's nested jar packaging due to Storm's classloader
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

mainClassName = "io.fstream.compute.ComputeMain"

shadowJar {
  exclude 'META-INF/*.SF'
  exclude 'META-INF/*.DSA'
  exclude 'META-INF/*.RSA'
  
  // Required for Storm
  exclude 'defaults.yaml'
  classifier = ''

  // Required for Spring
  mergeServiceFiles()
  transform(AppendingTransformer) { resource = 'reference.conf'  }
  transform(AppendingTransformer) { resource = 'META-INF/spring.handlers'  }
  transform(AppendingTransformer) { resource = 'META-INF/spring.schemas'  }
  transform(AppendingTransformer) { resource = 'META-INF/spring.tooling'  }
  transform(PropertiesFileTransformer) { paths = ['META-INF/spring.factories' ] }
}

build.dependsOn shadowJar

applicationDistribution.with {
  // Exclude defaults in lieu of fat jar
  exclude { it.file in configurations.runtime.files }
  from("src/main/conf") {
    into "conf"
  }
}

startScripts {
  classpath = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files
  classpath += files('conf')
  doLast {
    // https://issues.gradle.org/browse/GRADLE-2991
    unixScript.text = unixScript.text.replace('$APP_HOME/lib/conf', '$APP_HOME/conf')
  }
}

distTar {
  dependsOn shadowJar
  compression Compression.GZIP
  extension "tar.gz"
}

dependencies {
  // fStream
  compile project(':fstream-core')

  // Spring
  compile libraries.springBootActuator

  // Storm
  compile libraries.storm

  // Storm-Kafka
  compile libraries.stormKafka

  // Kafka
  compile libraries.kafka

  // Esper
  compile libraries.esper

  // Utilities
  compile libraries.guava
}
