/*
 * Copyright (c) 2014 fStream. All Rights Reserved.
 *
 * Project and contact information: https://bitbucket.org/fstream/fstream
 *
 * Unauthorized copying of this file, via any medium is strictly prohibited.
 * Proprietary and confidential.
 */

import com.github.jengelman.gradle.plugins.shadow.transformers.*
 
defaultTasks 'clean', 'tarball'

// Import utilities
apply from: "$rootDir/gradle/tasks.gradle"

buildscript {
	
	// Import library definitions
	apply from: "$rootDir/gradle/libraries.gradle", to: ext
	
	repositories {
		mavenLocal()
		maven { url "http://repo.spring.io/libs-milestone" }
		maven { url "http://repo.spring.io/libs-snapshot" }
		maven { url 'http://repo.spring.io/plugins-release' }
		maven { url "https://oss.jfrog.org/oss-snapshot-local" }
		maven { url "http://repo.akka.io/snapshots/" }
		maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
		jcenter()
	}

	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
		classpath "org.springframework.build.gradle:propdeps-plugin:0.0.6"
		classpath 'org.ajoberstar:gradle-git:0.8.0'
		classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
		classpath 'com.moowork.gradle:gradle-node-plugin:0.10-SNAPSHOT'
		classpath 'com.moowork.gradle:gradle-grunt-plugin:0.10-SNAPSHOT'
	}
	
}

subprojects {

	version = '0.0.1-SNAPSHOT'
	group = 'io.fstream'

	apply plugin: 'java'

	// See http://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html#configuration-metadata-annotation-processor
	apply plugin: 'propdeps'
	compileJava.dependsOn(processResources)

	// Create new provided scope similiar to maven
	configurations {
		provided
		compile.extendsFrom provided
	}
	sourceSets {
		main { compileClasspath += configurations.provided }
	}

	// Java 8
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

	repositories {
		mavenCentral()
		maven { url "http://seqwaremaven.oicr.on.ca/artifactory/dcc-dependencies" }
		maven { url "http://repo.spring.io/libs-milestone" }
		maven { url "http://repo.spring.io/libs-snapshot" }
		maven { url 'http://repo.marketcetera.org/maven' }
		maven { url 'http://clojars.org/repo' }
		maven { url 'http://conjars.org/repo' }
		maven { url 'http://twitter4j.org/maven2' }
		maven { url "http://repo.akka.io/snapshots/" }
	}

	configurations {
		all*.exclude group: 'org.slf4j', module: 'slf4j-simple'
		all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
		all*.exclude group: 'log4j', module: 'log4j'
		all*.exclude group: 'javax.jms', module: 'jms'
		all*.exclude group: 'com.sun.jdmk', module: 'jmxtools'
		all*.exclude group: 'com.sun.jmx', module: 'jmxri'
	}

	dependencies {
		// Compile-time transformations
		provided "org.projectlombok:lombok:$lombokVersion"

		// Utilities
		compile 'joda-time:joda-time:2.3'

		// Logging
		compile 'ch.qos.logback:logback-classic:1.1.3'
		compile 'org.slf4j:jcl-over-slf4j:1.7.12'
		compile 'org.slf4j:log4j-over-slf4j:1.7.12'

		optional "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion"

		// Test
		testCompile 'junit:junit:4.11'
		testCompile 'org.assertj:assertj-core:1.6.0'
		testCompile 'org.mockito:mockito-all:1.9.5'
	}

	jar {
		manifest {
			attributes 'Provider': 'gradle', 'Implementation-Title': project.name, 'Implementation-Version': project.version
		}
	}

	/**
	 * Package an application jar with its associated configuration as a tarball
	 */
	task tarball(type: Tar) {
	}
	
	//
	// Configs
	//
	
	ext.configs = [
		shadowJar: {
			zip64 true
		
			exclude 'META-INF/*.SF'
			exclude 'META-INF/*.DSA'
			exclude 'META-INF/*.RSA'
		
			classifier = ''
		
			// Required for Spring
			mergeServiceFiles()
			transform(AppendingTransformer) { resource = 'reference.conf'  }
			transform(AppendingTransformer) { resource = 'META-INF/spring.handlers'  }
			transform(AppendingTransformer) { resource = 'META-INF/spring.schemas'  }
			transform(AppendingTransformer) { resource = 'META-INF/spring.tooling'  }
			transform(PropertiesFileTransformer) { paths = [ 'META-INF/spring.factories' ] }
		},
		
		startScripts: {
			classpath = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files
			classpath += files('conf')
			doLast {
				// https://issues.gradle.org/browse/GRADLE-2991
				unixScript.text = unixScript.text.replace('$APP_HOME/lib/conf', '$APP_HOME/conf')
			}
		},
		
		tar: {
			compression Compression.GZIP
			extension "tar.gz"
			with copySpec {
				into("$baseName-$version") {
					into('lib') {
						from "$buildDir/libs"
						include '*.jar'
					}
					into('bin') {
						from "$buildDir/scripts"
						include '*'
						fileMode 0755
					}
					into('conf') {
						from "src/main/resources"
						include '*.yml'
						include '*.xml'
					}
					into('conf') {
						from "src/main/conf"
						include '*'
					}
				}
			}
		}
	]

}
