/*
 * Copyright (c) 2014 fStream. All Rights Reserved.
 *
 * Project and contact information: https://bitbucket.org/fstream/fstream
 *
 * Unauthorized copying of this file, via any medium is strictly prohibited.
 * Proprietary and confidential.
 */

import java.util.concurrent.TimeUnit

defaultTasks 'build'

buildscript {

	//
	// Versions
	//
	
	ext {
		springBootVersion  = "1.2.4.RELEASE"
		springCloudVersion = "1.0.0.M2"
		
		kafkaVersion       = '0.8.2.0'
		stormVersion       = '0.9.4'
		
		akkaVersion        = '2.3.11'
		
		sparkVersion       = '1.3.1'
		hbaseVersion       = '1.0.0-cdh5.4.3'
		hadoopVersion      = '2.6.0-cdh5.4.3'
		
		influxdbVersion    = '1.5'
	
		camelVersion       = '2.15.2'
		esperVersion       = '4.11.0'
		curatorVersion     = '2.6.0'
		quickfixjVersion   = '1.5.3'
		jacksonVersion     = '2.3.3'
		guavaVersion       = '18.0'
		lombokVersion      = '1.16.4'
	
		//
		// Libraries
		//
	
		libraries = [
			springBoot:          "org.springframework.boot:spring-boot:$springBootVersion",
			springBootActuator:  "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion",
			springBootWeb:       "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
			springCloudClient:   "org.springframework.cloud:spring-cloud-config-client:$springCloudVersion",
			springCloudServer:   "org.springframework.cloud:spring-cloud-config-server:$springCloudVersion",
			
			jacksonDatabind:     "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
			jacksonAnnotations:  "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
			jacksonJoda:         "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion",
			
			kafka:               "org.apache.kafka:kafka_2.10:$kafkaVersion",
			storm:               "org.apache.storm:storm-core:${stormVersion}",
			stormKafka:          "org.apache.storm:storm-kafka:${stormVersion}",
			
			sparkSql:            "org.apache.spark:spark-sql_2.10:$sparkVersion",
			sparkStreaming:      "org.apache.spark:spark-streaming_2.10:$sparkVersion",
			sparkStreamingKafka: "org.apache.spark:spark-streaming-kafka_2.10:$sparkVersion",
			
			akkaActor:           "com.typesafe.akka:akka-actor_2.10:${akkaVersion}",
			akkaCamel:           "com.typesafe.akka:akka-camel_2.10:${akkaVersion}",
			akkaTestkit:         "com.typesafe.akka:akka-testkit_2.10:${akkaVersion}",
			
			influxdb:            "org.influxdb:influxdb-java:$influxdbVersion",
			hadoopClient:        "org.apache.hadoop:hadoop-client:$hadoopVersion",
			hadoopMiniCluster:   "org.apache.hadoop:hadoop-minicluster:$hadoopVersion",
			hbaseClient:         "org.apache.hbase:hbase-client:$hbaseVersion",
			esper:               "com.espertech:esper:${esperVersion}",
			guava:               "com.google.guava:guava:$guavaVersion",
			curator:             "org.apache.curator:curator-recipes:$curatorVersion",
			curatorTest:         "org.apache.curator:curator-test:$curatorVersion"
		]
	}

	repositories {
		mavenLocal()
		maven { url "http://repo.spring.io/libs-milestone" }
		maven { url "http://repo.spring.io/libs-snapshot" }
		maven { url "https://oss.jfrog.org/oss-snapshot-local" }
		maven { url "http://repo.akka.io/snapshots/" }
		maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
		jcenter()
	}

	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
		classpath 'org.ajoberstar:gradle-git:0.8.0'
		classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.1'
		classpath 'com.moowork.gradle:gradle-node-plugin:0.10-SNAPSHOT'
		classpath 'com.moowork.gradle:gradle-grunt-plugin:0.10-SNAPSHOT'
	}
}

subprojects {
	version = '0.0.1-SNAPSHOT'
	group = 'io.fstream'

	apply plugin: 'java'

	// Create new scope
	configurations {
		provided
		compile.extendsFrom provided
	}

	sourceSets {
		main { compileClasspath += configurations.provided }
	}

	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

	repositories {
		mavenCentral()
		maven { url "http://seqwaremaven.oicr.on.ca/artifactory/dcc-dependencies" }
		maven { url "http://repo.spring.io/libs-milestone" }
		maven { url "http://repo.spring.io/libs-snapshot" }
		maven { url 'http://repo.marketcetera.org/maven' }
		maven { url 'http://clojars.org/repo' }
		maven { url 'http://conjars.org/repo' }
		maven { url 'http://twitter4j.org/maven2' }
		maven { url "http://repo.akka.io/snapshots/" }
	}

	configurations {
		all*.exclude group: 'org.slf4j', module: 'slf4j-simple'
		all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
		all*.exclude group: 'log4j', module: 'log4j'
		all*.exclude group: 'javax.jms', module: 'jms'
		all*.exclude group: 'com.sun.jdmk', module: 'jmxtools'
		all*.exclude group: 'com.sun.jmx', module: 'jmxri'
	}

	dependencies {
		// Compile-time transformations
		provided "org.projectlombok:lombok:$lombokVersion"

		// Utilities
		compile 'joda-time:joda-time:2.3'

		// Logging
		compile 'ch.qos.logback:logback-classic:1.1.3'
		compile 'org.slf4j:jcl-over-slf4j:1.7.6'
		compile 'org.slf4j:log4j-over-slf4j:1.7.6'

		// Test
		testCompile 'junit:junit:4.11'
		testCompile 'org.assertj:assertj-core:1.6.0'
		testCompile 'org.mockito:mockito-all:1.9.5'
	}

	jar {
		manifest {
			attributes 'Provider': 'gradle', 'Implementation-Title': project.name, 'Implementation-Version': project.version
		}
	}
}

/**
 * Run fStream in "vagrant up / fig up" style.
 */
task up << {
	addShutdownHook {
		println "**** Shutting down..."
		
		println "Waiting ${seconds}s ..."
		TimeUnit.SECONDS.sleep(seconds)
	}

	def tasks = project.getAllTasks(true).values().flatten().findAll { it.name in ["bootRun", "run"] }.collectEntries{[it.project.name, it]}
	def seconds = 10

	[
		'fstream-configure',
		'fstream-test',
		'fstream-persist',
		'fstream-rates',
		'fstream-compute',
		'fstream-web',
		'fstream-ui'
	].each { projectName ->
		Thread.start {
			println "Running $projectName..."
			def task = tasks[projectName]
			def name = projectName.split("-")[1]
			task.main = "io.fstream.${name}.${name.capitalize()}Main"

			task.execute()
		}

		println "Waiting ${seconds}s ..."
		TimeUnit.SECONDS.sleep(seconds)
	}

	// Finished
	println ""
	println '#' * 100
	println "Finished starting system"
	println '#' * 100
	println ""
	
	TimeUnit.DAYS.sleep(1)
}

/**
 * Kills all fStream processes.
 */
task kill << {
	def process = "jps -l".execute()
	process.waitFor()
	def lines = process.in.text.eachLine {
		if (it.contains("io.fstream")) {
			println "Killing: $it"
			def pid = it.split()[0]
			"kill -9 $pid".execute().waitFor()
		}
	}
}

/**
 * Provisions Vagrant.
 */
task vagrant(type: Exec, dependsOn: subprojects.collectNested { p -> p.tasks.matching { t -> t.name.endsWith("distTar") } }) {
	workingDir "src/main/vagrant/virtualbox-single"
	commandLine "vagrant", "up"
	standardInput = System.in
}
